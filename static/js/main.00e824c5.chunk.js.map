{"version":3,"sources":["components/Landing.js","apis/trivia.js","components/Questions.js","components/App.js","index.js"],"names":["Landing","props","className","Button","color","onClick","axios","create","baseURL","Questions","state","answers","questions","correctAnswer","currentQuestion","showAnswers","fetchQuestions","a","trivia","get","res","loadedQuestions","data","results","formattedQuestion","formattedAnswers","forEach","loadedQuestion","index","correctAnswerIndex","Math","floor","random","question","incorrect_answers","splice","correct_answer","setState","indexOf","console","log","onAnswer","e","Number","target","value","onCorrect","onNext","renderAnswers","map","answer","answerIndex","dangerouslySetInnerHTML","__html","renderQuestions","length","Spinner","onPlayAgain","this","score","React","Component","App","showQuestions","highScore","questionSet","onPlay","Container","style","height","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.00e824c5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"reactstrap\";\nconst Landing = (props) => {\n  return (\n    <>\n      <h1 className=\"text-muted\">Quick Quiz!</h1>\n      <Button color=\"danger\" onClick={props.onClick}>\n        Let's Go!\n      </Button>\n    </>\n  );\n};\n\nexport default Landing;\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL:\n    \"https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple\",\n});\n","import React from \"react\";\nimport { Button, Spinner } from \"reactstrap\";\nimport trivia from \"../apis/trivia\";\nimport \"./Questions.css\";\nclass Questions extends React.Component {\n  state = {\n    answers: [],\n    questions: [],\n    correctAnswer: [],\n    currentQuestion: 0,\n    showAnswers: false,\n  };\n\n  fetchQuestions = async () => {\n    try {\n      const res = await trivia.get();\n      const loadedQuestions = [...res.data.results];\n      const formattedQuestion = [];\n      const formattedAnswers = [];\n\n      loadedQuestions.forEach((loadedQuestion, index) => {\n        let correctAnswerIndex = Math.floor(Math.random() * 3) + 1;\n\n        formattedQuestion[index] = loadedQuestion.question;\n        formattedAnswers[index] = loadedQuestion.incorrect_answers;\n        formattedAnswers[index].splice(\n          correctAnswerIndex - 1,\n          0,\n          loadedQuestion.correct_answer\n        );\n        this.setState({\n          correctAnswer: [\n            ...this.state.correctAnswer,\n            formattedAnswers[index].indexOf(loadedQuestion.correct_answer),\n          ],\n        });\n      });\n\n      this.setState({\n        questions: formattedQuestion,\n        answers: formattedAnswers,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  async componentDidMount() {\n    this.fetchQuestions();\n  }\n\n  onAnswer = (e) => {\n    this.setState({ showAnswers: true });\n    if (\n      Number(e.target.value) ===\n      this.state.correctAnswer[this.state.currentQuestion]\n    ) {\n      this.props.onCorrect();\n    }\n  };\n\n  onNext = () => {\n    this.setState({\n      showAnswers: false,\n      currentQuestion: this.state.currentQuestion + 1,\n    });\n  };\n\n  renderAnswers = (index) => {\n    return this.state.answers[index].map((answer, answerIndex) => {\n      const className = `w-50 mt-2 py-3 text-white\n      ${this.state.showAnswers ? \"show-answers\" : \"\"}\n      ${\n        this.state.correctAnswer[index] === answerIndex ? \"correct-answer\" : \"\"\n      }`;\n      return (\n        <Button\n          key={answer}\n          value={answerIndex}\n          color=\"info\"\n          className={className}\n          dangerouslySetInnerHTML={{ __html: answer }}\n          onClick={this.onAnswer}\n        ></Button>\n      );\n    });\n  };\n\n  renderQuestions = () => {\n    if (this.state.questions.length === 0) {\n      return (\n        <div>\n          <Spinner color=\"primary\"> </Spinner>\n        </div>\n      );\n    } else {\n      if (this.state.currentQuestion < this.state.questions.length) {\n        return (\n          <>\n            <h1\n              className=\"text-muted\"\n              dangerouslySetInnerHTML={{\n                __html: this.state.questions[this.state.currentQuestion],\n              }}\n            ></h1>\n            {this.renderAnswers(this.state.currentQuestion)}\n            <Button className=\"mt-5 px-5\" onClick={this.onNext}>\n              Next\n            </Button>\n          </>\n        );\n      }\n      return (\n        <>\n          <div>No more question!</div>\n          <Button onClick={() => this.props.onPlayAgain()} className=\"mt-5\">\n            Next Set!\n          </Button>\n        </>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Score: {this.props.score}</h1>\n        {this.renderQuestions()}\n      </>\n    );\n  }\n}\n\nexport default Questions;\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport Landing from \"./Landing\";\nimport Questions from \"./Questions\";\nclass App extends React.Component {\n  state = { showQuestions: false, highScore: 0, score: 0, questionSet: 0 };\n\n  onPlay = () => {\n    this.setState({ showQuestions: true });\n  };\n\n  renderQuestions() {\n    if (!this.state.showQuestions) return <Landing onClick={this.onPlay} />;\n    return (\n      <>\n        <Questions\n          key={this.state.questionSet}\n          onPlayAgain={() =>\n            this.setState({ questionSet: this.state.questionSet + 1 })\n          }\n          score={this.state.score}\n          onCorrect={() => {\n            this.setState({ score: this.state.score + 10 });\n          }}\n        />\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <Container\n        className=\"align-items-center d-flex flex-column landing justify-content-center\"\n        style={{ height: \"100vh\" }}\n      >\n        {this.renderQuestions()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}