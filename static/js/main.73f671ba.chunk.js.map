{"version":3,"sources":["components/Landing.js","apis/trivia.js","components/Timer.js","components/Questions.js","components/App.js","index.js"],"names":["Landing","props","className","highScore","Row","categories","map","name","id","Col","lg","Button","variant","onClick","onCategoryChosen","renderCategories","axios","create","baseURL","params","category","Timer","useState","seconds","setSeconds","updateTime","onTimeOut","useEffect","token","setTimeout","clearTimeout","Questions","state","answers","questions","correctAnswer","currentQuestion","showAnswers","score","fetchQuestions","a","trivia","get","res","loadedQuestions","data","results","formattedQuestion","formattedAnswers","forEach","loadedQuestion","index","correctAnswerIndex","Math","floor","random","question","incorrect_answers","splice","correct_answer","setState","indexOf","console","log","onAnswer","e","Number","target","value","onNext","renderAnswers","answer","answerIndex","dangerouslySetInnerHTML","__html","renderQuestions","length","Spinner","color","now","ProgressBar","animated","this","onHigherScore","onEndOfQuestions","React","Component","App","showQuestions","questionSet","chosenCategory","congratulations","userChoice","response","trivia_categories","style","borderRadius","Container","height","renderCongrats","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.73f671ba.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nconst Landing = (props) => {\n  const renderCategories = () => {\n    if (props.categories) {\n      return props.categories.map(({ name, id }) => (\n        <Col lg=\"4\" className=\"mt-3\" key={id}>\n          <Button\n            variant=\"success\"\n            className=\"w-75\"\n            onClick={() => props.onCategoryChosen(id)}\n          >\n            {name}\n          </Button>\n        </Col>\n      ));\n    }\n  };\n  return (\n    <>\n      <h1 className=\"text-muted\">Quick Quiz!</h1>\n      <h2>High Score: {props.highScore}</h2>\n      <Row className=\"text-center\">{renderCategories()}</Row>\n    </>\n  );\n};\n\nexport default Landing;\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://opentdb.com/api.php?amount=10\",\n  params: {\n    category: 20,\n  },\n});\n","import React, { useState, useEffect } from \"react\";\n\nconst Timer = (props) => {\n  const [seconds, setSeconds] = useState(30);\n\n  function updateTime() {\n    if (seconds === 0) {\n      //reset\n      props.onTimeOut();\n      setSeconds(30);\n    } else {\n      setSeconds((seconds) => seconds - 1);\n    }\n  }\n\n  useEffect(() => {\n    // use set timeout and be confident because updateTime will cause rerender\n    // rerender mean re call this effect => then it will be similar to how setinterval works\n    // but with easy to understand logic\n    const token = setTimeout(updateTime, 1000);\n\n    return function cleanUp() {\n      clearTimeout(token);\n    };\n  });\n\n  return <h1 className=\"text-muted\">Time: {seconds}</h1>;\n};\n\nexport default Timer;\n","import React from \"react\";\nimport { Button, Spinner, ProgressBar, Row, Col } from \"react-bootstrap\";\nimport trivia from \"../apis/trivia\";\nimport \"./Questions.css\";\nimport Timer from \"./Timer\";\n\nclass Questions extends React.Component {\n  state = {\n    answers: [],\n    questions: [],\n    correctAnswer: [],\n    currentQuestion: 0,\n    showAnswers: false,\n    score: 0,\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (\n      state.currentQuestion >= state.questions.length &&\n      state.questions.length !== 0\n    ) {\n      if (state.score > props.highScore) {\n        props.onHigherScore(state.score);\n      }\n      props.onEndOfQuestions();\n      return { score: 0 };\n    }\n    return null;\n  }\n\n  fetchQuestions = async () => {\n    try {\n      const res = await trivia.get(\"\", {\n        params: {\n          category: this.props.category,\n        },\n      });\n      const loadedQuestions = [...res.data.results];\n      const formattedQuestion = [];\n      const formattedAnswers = [];\n\n      loadedQuestions.forEach((loadedQuestion, index) => {\n        let correctAnswerIndex = Math.floor(Math.random() * 4);\n\n        formattedQuestion[index] = loadedQuestion.question;\n        formattedAnswers[index] = loadedQuestion.incorrect_answers;\n        formattedAnswers[index].splice(\n          correctAnswerIndex,\n          0,\n          loadedQuestion.correct_answer\n        );\n        this.setState({\n          correctAnswer: [\n            ...this.state.correctAnswer,\n            formattedAnswers[index].indexOf(loadedQuestion.correct_answer),\n          ],\n        });\n      });\n\n      this.setState({\n        questions: formattedQuestion,\n        answers: formattedAnswers,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  async componentDidMount() {\n    this.fetchQuestions();\n  }\n\n  onAnswer = (e) => {\n    this.setState({ showAnswers: true });\n    if (\n      Number(e.target.value) ===\n      this.state.correctAnswer[this.state.currentQuestion]\n    ) {\n      this.setState({ score: this.state.score + 10 });\n    }\n  };\n\n  onNext = () => {\n    this.setState({\n      showAnswers: false,\n      currentQuestion: this.state.currentQuestion + 1,\n    });\n  };\n\n  renderAnswers = (index) => {\n    return this.state.answers[index].map((answer, answerIndex) => {\n      const className = `w-50 mt-2 py-3 text-white\n      ${this.state.showAnswers ? \"show-answers\" : \"\"}\n      ${\n        this.state.correctAnswer[index] === answerIndex ? \"correct-answer\" : \"\"\n      }`;\n      return (\n        <Button\n          key={answer}\n          value={answerIndex}\n          variant=\"info\"\n          className={className}\n          dangerouslySetInnerHTML={{ __html: answer }}\n          onClick={this.onAnswer}\n        ></Button>\n      );\n    });\n  };\n\n  renderQuestions = () => {\n    if (this.state.questions.length === 0) {\n      return (\n        <div>\n          <Spinner color=\"primary\"> </Spinner>\n        </div>\n      );\n    } else {\n      if (this.state.currentQuestion < this.state.questions.length) {\n        const now =\n          (this.state.currentQuestion * 100) / this.state.questions.length;\n\n        return (\n          <>\n            <div className=\"w-100 mt-3\">\n              <ProgressBar now={now} animated variant=\"warning\" />\n            </div>\n            <h1>Score: {this.state.score}</h1>\n            <h1\n              className=\"text-muted text-center\"\n              dangerouslySetInnerHTML={{\n                __html: this.state.questions[this.state.currentQuestion],\n              }}\n            ></h1>\n            {this.renderAnswers(this.state.currentQuestion)}\n\n            <Row className=\"w-50 mt-3 text-center align-items-center\">\n              <Col lg=\"6\">\n                <Timer onTimeOut={this.onNext} />\n              </Col>\n              <Col lg=\"6\">\n                <Button className=\"px-5\" onClick={this.onNext}>\n                  Next\n                </Button>\n              </Col>\n            </Row>\n          </>\n        );\n      }\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h1>High Score: {this.props.highScore}</h1>\n        {this.renderQuestions()}\n      </>\n    );\n  }\n}\n\nexport default Questions;\n","import axios from \"axios\";\nimport React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Landing from \"./Landing\";\nimport Questions from \"./Questions\";\nclass App extends React.Component {\n  state = {\n    showQuestions: false,\n    highScore: 0,\n    questionSet: 0,\n    categories: [],\n    chosenCategory: 0,\n    congratulations: \"\",\n  };\n\n  onCategoryChosen = (userChoice) => {\n    this.setState({\n      showQuestions: true,\n      chosenCategory: userChoice,\n      congratulations: \"\",\n    });\n  };\n\n  onEndOfQuestions = () => {\n    this.setState({ showQuestions: false });\n  };\n\n  onHigherScore = (score) => {\n    if (score > this.state.highScore)\n      this.setState({\n        highScore: score,\n        congratulations: \"You created a new high score!\",\n      });\n  };\n\n  renderQuestions() {\n    if (!this.state.showQuestions)\n      return (\n        <Landing\n          onCategoryChosen={this.onCategoryChosen}\n          categories={this.state.categories}\n          highScore={this.state.highScore}\n        />\n      );\n    return (\n      <>\n        <Questions\n          category={this.state.chosenCategory}\n          key={this.state.questionSet}\n          onEndOfQuestions={this.onEndOfQuestions}\n          highScore={this.state.highScore}\n          onHigherScore={(score) => this.onHigherScore(score)}\n        />\n      </>\n    );\n  }\n\n  async componentDidMount() {\n    const response = await axios.get(\"https://opentdb.com/api_category.php\");\n    this.setState({ categories: response.data.trivia_categories });\n  }\n\n  renderCongrats() {\n    if (this.state.congratulations === \"\") {\n      return \"\";\n    }\n    return (\n      <h1\n        className=\"bg-info p-4 mb-2 text-white\"\n        style={{ borderRadius: \"50px\" }}\n      >\n        {this.state.congratulations}\n      </h1>\n    );\n  }\n\n  render() {\n    return (\n      <Container\n        className=\"align-items-center d-flex flex-column landing justify-content-center\"\n        style={{ height: \"100vh\" }}\n      >\n        {this.renderCongrats()}\n        {this.renderQuestions()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}